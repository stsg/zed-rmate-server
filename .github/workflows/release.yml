name: Release

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  release_job:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release info
        # e.g. refs/tags/0.1
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: softprops/action-gh-release@v2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: true

  native_job:
    needs: release_job
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12, macos-14]
        include:
          - os: ubuntu-latest
            arch: Linux-amd64
          - os: macos-12
            arch: macOS-x86_64
          - os: macos-14
            arch: macOS-arm64

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}
    env:
      NAME: zed-rmate-server
    steps:
      - name: Versions
        run: |
          cargo --version
          rustc --version
      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --release --verbose
      - name: Tests
        run: cargo test --verbose
      - name: "Upload Release Asset"
        working-directory: target/release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXEC_BIN: ${{ env.NAME }}
          ZIP_FILE: ${{ env.NAME }}-${{ matrix.arch }}-${{ needs.release_job.outputs.release_version }}.zip
        run: |
          strip $EXEC_BIN
          zip --junk-paths $ZIP_FILE $EXEC_BIN
          gh release upload ${{ needs.release_job.outputs.release_version }} $ZIP_FILE

  cross_job:
    needs: release_job
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
    runs-on: ubuntu-latest
    name: Build for ${{ matrix.target }}
    env:
      NAME: zed-rmate-server
      TARGET: ${{ matrix.target }}
    steps:
      - name: Versions
        run: |
          cargo --version
          rustc --version
      - uses: actions/checkout@v4
      - name: Install and configure dependencies
        run: |
          sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: "Upload Release Asset"
        working-directory: target/${{ matrix.target }}/release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXEC_BIN: ${{ env.NAME }}
          ZIP_FILE: ${{ env.NAME }}-${{ matrix.target }}-${{ needs.release_job.outputs.release_version }}.zip
        run: |
          # $TARGET-strip $EXEC_BIN
          zip --junk-paths $ZIP_FILE $EXEC_BIN
          gh release upload ${{ needs.release_job.outputs.release_version }} $ZIP_FILE
